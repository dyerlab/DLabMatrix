//
//  GraphTests.swift
//
//                      _                 _       _
//                   __| |_   _  ___ _ __| | __ _| |__
//                  / _` | | | |/ _ \ '__| |/ _` | '_ \
//                 | (_| | |_| |  __/ |  | | (_| | |_) |
//                  \__,_|\__, |\___|_|  |_|\__,_|_.__/
//                        |_ _/
//
//         Making Population Genetic Software That Doesn't Suck
//
//  Created by Rodney Dyer on 5/6/22.
//  Copyright (c) 2021-2025 The Dyer Laboratory.  All Rights Reserved.

import Testing
import Foundation
import DLabMatrix

struct GraphTests {
    
    @Test func testNode() throws {
        let Node_Aqu = Node(label: "Aqu", size:  13.267567610943 )
        let Node_73 = Node(label: "73", size:  7.10527775393008 )
        
        #expect( Node_Aqu.label == "Aqu")
        #expect( Node_Aqu.size == 13.267567610943)
        
        print(String("\(Node_Aqu)"))
        #expect(String("\(Node_Aqu)") == "Aqu: 13.267567610943 ")
        #expect( Node_73 != Node_Aqu )
        
        let encoder = JSONEncoder()
        encoder.outputFormatting = .prettyPrinted
        
        // Add an edge
        let edge = Edge(from: Node_73, to: Node_Aqu, weight: 3.69526146781118)
        #expect( edge.from == Node_73.id )
        #expect( edge.to == Node_Aqu.id )
        #expect( edge.weight  == 3.69526146781118 )
        
        // Encode
        let data = try encoder.encode( Node_73 )
        print(String(data: data, encoding: .utf8)! )
        let decoder = JSONDecoder()
        let New_73 = try decoder.decode( Node.self, from: data )
        
        #expect( Node_73 == New_73 )
        print(String("\(New_73)"))
        
    }
    
    @Test func testEdge()  {
        
        let Node_Aqu = Node(label: "Aqu", size:  13.267567610943 )
        let Node_73 = Node(label: "73", size:  7.10527775393008 )
        let Node_ESan = Node(label: "ESan", size:  8.14010246388221 )
        let edge73_Aqu = Edge(from: Node_73, to: Node_Aqu, weight: 3.69526146781118)
        let edge73_ESan = Edge(from: Node_73, to: Node_ESan, weight: 3.80626949664509)
        
        #expect( edge73_Aqu != edge73_ESan)
        print(String("\(edge73_Aqu)"))
        #expect( edge73_Aqu.description == String("\(Node_73.id) -> \(Node_Aqu.id)  \(edge73_Aqu.weight)"))
    }
    
    
    @Test func testGraphNull() throws {
        let graphNull = Graph()
        #expect( graphNull.edges.count == 0 )
        #expect( graphNull.nodes.count == 0 )
        #expect( graphNull.count == 0)
        #expect( graphNull.incidence.rows == 0)
        #expect( graphNull.incidence.cols == 0)
        #expect( graphNull.adjacency.rows == 0)
        #expect( graphNull.adjacency.cols == 0)
    }
    
    @Test func testGraphDefault() throws {
        
        let graph = Graph.arapatGraph
        
        #expect( graph.count == 39)
        #expect( graph.edges.count == 142)
        
        let adj = [0.0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
                   0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
                   0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
                   0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,
                   0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,
                   1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
                   0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,
                   0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,
                   0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,
                   0,0,1,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,
                   0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,
                   0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
                   0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,
                   0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,
                   0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0]
        let names = graph.nodes.map { $0.label }
        let A = Matrix( 39, 39, adj )
        A.rowNames = names
        A.colNames = names
        #expect( graph.incidence == A)
        
        
        
        let wt = [0, 8.45324671861479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11.3392934536416, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.45324671861479, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12.362907286415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.90432059242197, 0, 0, 0, 3.53104375426366, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.95907651440433, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.01936959972293, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.22917316036238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.03245913683026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.12419089808696, 0, 0, 0, 5.02121609605313, 5.78348393054996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.03245913683026, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.35040106460888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.73488748210723, 0, 3.76005223133308, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.84376688249322, 2.89614187678504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.16572420527593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.85617041124065, 2.70207873507271, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.91697233762107, 0, 0, 0, 0, 0, 2.93265079330762, 0, 0, 2.90432059242197, 0, 0, 0, 0, 0, 0, 3.31649675878596, 0, 0, 3.11692197360927, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.50373688639928, 0, 0, 0, 0, 0, 2.78976954662207, 0, 0, 0, 0, 0, 0, 0, 0, 3.31649675878596, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.19795399169884, 0, 0, 4.93245306852763, 0, 0, 0, 0, 3.29009085293472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9.51832446611554, 0, 0, 0, 0, 0, 0, 0, 0, 8.2403521345715, 8.36864126827798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.24795854776905, 0, 0, 3.71002063341606, 0, 0, 0, 0, 0, 0, 5.87479501991042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.67765457155976, 0, 0, 5.81109654957985, 0, 0, 3.53104375426366, 4.01936959972293, 0, 0, 0, 0, 3.11692197360927, 0, 0, 4.24795854776905, 0, 0, 3.33489401772703, 2.85506964665014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.37837128931742, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.00335783307894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.85617041124065, 0, 0, 0, 0, 3.33489401772703, 4.00335783307894, 0, 0, 0, 0, 0, 0, 0, 0, 5.89050582196515, 3.98073711030734, 4.40361382730534, 0, 0, 5.05214719304512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.70207873507271, 0, 0, 0, 3.71002063341606, 2.85506964665014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.93645031235043, 0, 0, 0, 0, 0, 0, 0, 0, 2.6340580477165, 0, 0, 0, 0, 0, 2.63342673975013, 0, 0, 0, 0, 0, 0, 2.84376688249322, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.72117328085346, 3.18304152193125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.89614187678504, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.72117328085346, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.23348171031955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.18304152193125, 0, 0, 1.84258746362758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.63957775022367, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.84258746362758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.99650028760203, 0, 3.1763401621417, 0, 0, 0, 0, 0, 0, 0, 11.3392934536416, 12.362907286415, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.12419089808696, 4.35040106460888, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.48492608276231, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5.87479501991042, 0, 0, 5.89050582196515, 0, 0, 0, 0, 0, 0, 0, 0, 4.98332507330647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1.22917316036238, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.98073711030734, 2.93645031235043, 0, 0, 0, 0, 0, 0, 4.98332507330647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.56433514791233, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6.19795399169884, 0, 0, 0, 0, 4.40361382730534, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.35584476681317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.4480950761091, 0, 0, 0, 0, 5.02121609605313, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.65872754021918, 0, 0, 0, 0, 0, 0, 0, 3.69526146781118, 0, 3.62837887224329, 0, 0, 0, 0, 0, 0, 5.78348393054996, 0, 0, 0, 0, 0, 9.51832446611554, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.65872754021918, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.93245306852763, 0, 0, 4.37837128931742, 0, 5.05214719304512, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.35584476681317, 0, 0, 0, 0, 0, 0, 0, 3.93301088197976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.49124569905757, 7.54705626431276, 4.40780576409764, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.63957775022367, 2.99650028760203, 0, 0, 0, 0, 0, 0, 0, 0, 4.49124569905757, 0, 0, 3.33802592490648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.16572420527593, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.23348171031955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7.54705626431276, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.1763401621417, 0, 0, 0, 0, 0, 0, 0, 0, 4.40780576409764, 3.33802592490648, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.95907651440433, 0, 0, 0, 0, 2.91697233762107, 2.50373688639928, 3.29009085293472, 0, 0, 0, 0, 0, 2.6340580477165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.93301088197976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.38236384351171, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.19608147299158, 0, 0, 0, 0, 0, 0, 4.73488748210723, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.69526146781118, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.80626949664508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8.2403521345715, 4.67765457155976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.76005223133308, 0, 0, 0, 0, 8.36864126827798, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3.48492608276231, 0, 0, 0, 3.62837887224329, 0, 0, 0, 0, 0, 0, 0, 0, 3.80626949664508, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4.19608147299158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2.93265079330762, 2.78976954662207, 0, 0, 5.81109654957985, 0, 0, 0, 2.63342673975013, 0, 0, 0, 0, 0, 0, 0, 3.56433514791233, 4.4480950761091, 0, 0, 0, 0, 0, 0, 0, 2.38236384351171, 0, 0, 0, 0, 0, 0 ]
        
        let B = Matrix( 39, 39, wt )
        B.rowNames = names
        B.colNames = names
        let E = graph.adjacency
        #expect( E == B)
        
        /*
        let cgd: [Double] = [0.0, 8.45324671861479, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 11.3392934536416, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             8.45324671861479, 0.0, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 12.362907286415, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, 0.0, 7.55041335398658, 35.9988174048295, 32.825702507775, .infinity, 5.8760488520254, 2.90432059242197, 6.22081735120793, 20.697009008164, 7.7790023020327, 3.53104375426366, 10.8692956050696, 6.86593777199068, 5.59313456212082, .infinity, .infinity, .infinity, .infinity, .infinity, 32.5505763592043, 12.7564435939558, 8.52958487447125, 9.78953543402514, 32.6940291486852, 30.2153334742795, 6.89208739638408, .infinity, .infinity, .infinity, .infinity, 2.95907651440433, .infinity, 32.871919773087, 12.4566568735925, 29.065650276442, .infinity, 5.34144035791604,
                             .infinity, .infinity, 7.55041335398658, 0.0, 36.0954592089256, 32.9223443118712, .infinity, 6.86770220778552, 7.1362915733322, 10.089772373364, 20.7936508122601, 7.87564410612886, 4.01936959972293, 9.21326810374866, 5.20991027066972, 4.16562347271281, .infinity, .infinity, .infinity, .infinity, .infinity, 32.6472181633004, 6.21249823366885, 1.22917316036238, 9.2416033843838, 32.7906709527814, 30.3119752783757, 8.39774088904035, .infinity, .infinity, .infinity, .infinity, 6.7996815204293, .infinity, 32.9685615771832, 12.5532986776886, 29.1622920805381, .infinity, 4.7935083082747,
                             .infinity, .infinity, 35.9988174048295, 36.0954592089256, 0.0, 4.03245913683026, .infinity, 34.6319144712855, 35.5846956241751, 37.853984636864, 15.3018083966655, 28.2198151027968, 32.4677736505658, 39.8060255013718, 35.8026676682928, 31.9298357362128, .infinity, .infinity, .infinity, .infinity, .infinity, 5.12419089808696, 34.0946101227072, 34.8662860485633, 38.4790067284857, 5.02121609605313, 5.78348393054996, 36.8461449398832, .infinity, .infinity, .infinity, .infinity, 34.5638937839293, .infinity, 8.71647756386431, 23.542160531237, 7.79251136816334, .infinity, 34.0309116523766,
                             .infinity, .infinity, 32.825702507775, 32.9223443118712, 4.03245913683026, 0.0, .infinity, 31.4587995742311, 32.4115807271206, 34.6808697398096, 12.1286934996111, 25.0467002057423, 29.2946587535114, 36.6329106043173, 32.6295527712384, 28.7567208391584, .infinity, .infinity, .infinity, .infinity, .infinity, 4.35040106460888, 30.9214952256527, 31.6931711515088, 35.3058918314313, 7.38843110357637, 9.81594306738022, 33.6730300428288, .infinity, .infinity, .infinity, .infinity, 31.3907788868749, .infinity, 4.73488748210723, 20.3690456341826, 3.76005223133308, .infinity, 30.8577967553222,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 0.0, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 2.84376688249322, 2.89614187678504, 6.02680840442447, 7.86939586805205, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 11.7127804695887, 9.66638615464814, 4.16572420527593, 11.0457360301937, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, 5.8760488520254, 6.86770220778552, 34.6319144712855, 31.4587995742311, .infinity, 0.0, 5.42070922402034, 6.20706319055579, 19.33010607462, 6.41209936848876, 5.55714838172285, 7.85952824431959, 3.85617041124065, 2.70207873507271, .infinity, .infinity, .infinity, .infinity, .infinity, 31.1836734256603, 9.7466762332058, 5.63852904742314, 7.38074586941672, 31.3271262151413, 28.8484305407356, 6.84998321960082, .infinity, .infinity, .infinity, .infinity, 2.91697233762107, .infinity, 31.5050168395431, 11.0897539400485, 27.698747342898, .infinity, 2.93265079330762,
                             .infinity, .infinity, 2.90432059242197, 7.1362915733322, 35.5846956241751, 32.4115807271207, .infinity, 5.42070922402034, 0.0, 3.31649675878596, 20.2828872275096, 7.36488052137832, 3.11692197360927, 10.4551738244152, 6.4518159913363, 5.13779493411577, .infinity, .infinity, .infinity, .infinity, .infinity, 32.1364545785499, 11.3374297678409, 6.3541046945344, 7.23786462273117, 32.2799073680309, 29.8012116936251, 6.43674776837903, .infinity, .infinity, .infinity, .infinity, 2.50373688639928, .infinity, 32.4577979924327, 12.0425350929381, 28.6515284957876, .infinity, 2.78976954662207,
                             .infinity, .infinity, 6.22081735120793, 10.089772373364, 37.853984636864, 34.6808697398096, .infinity, 6.20706319055579, 3.31649675878596, 0.0, 22.5521762401985, 9.63416953406728, 6.43341873239523, 13.7716705832012, 9.76831275012226, 5.92414890065122, .infinity, .infinity, .infinity, .infinity, .infinity, 34.4057435912388, 13.8439242863081, 8.86059921300165, 6.19795399169884, 34.5491963807198, 32.0705007063141, 4.93245306852763, .infinity, .infinity, .infinity, .infinity, 3.29009085293472, .infinity, 34.7270870051216, 14.311824105627, 30.9208175084765, .infinity, 5.67245469644643,
                             .infinity, .infinity, 20.697009008164, 20.7936508122601, 15.3018083966655, 12.1286934996111, .infinity, 19.33010607462, 20.2828872275096, 22.5521762401985, 0.0, 12.9180067061313, 17.1659652539003, 24.5042171047063, 20.5008592716273, 16.6280273395473, .infinity, .infinity, .infinity, .infinity, .infinity, 11.8535673510403, 18.7928017260417, 19.5644776518977, 23.1771983318202, 11.9970201405213, 9.51832446611554, 21.5443365432177, .infinity, .infinity, .infinity, .infinity, 19.2620853872638, .infinity, 12.1749107649231, 8.2403521345715, 8.36864126827798, .infinity, 18.7291032557111,
                             .infinity, .infinity, 7.7790023020327, 7.87564410612886, 28.2198151027968, 25.0467002057423, .infinity, 6.41209936848876, 7.36488052137832, 9.63416953406728, 12.9180067061313, 0.0, 4.24795854776905, 11.586210398575, 7.58285256549608, 3.71002063341606, .infinity, .infinity, .infinity, .infinity, .infinity, 24.7715740571715, 5.87479501991042, 6.64647094576649, 10.259191625689, 24.9150268466525, 22.4363311722468, 8.62632983708647, .infinity, .infinity, .infinity, .infinity, 6.34407868113255, .infinity, 25.0929174710543, 4.67765457155976, 21.2866479744092, .infinity, 5.81109654957985,
                             .infinity, .infinity, 3.53104375426366, 4.01936959972293, 32.4677736505658, 29.2946587535114, .infinity, 5.55714838172285, 3.11692197360927, 6.43341873239523, 17.1659652539003, 4.24795854776905, 0.0, 7.33825185080596, 3.33489401772703, 2.85506964665014, .infinity, .infinity, .infinity, .infinity, .infinity, 29.0195326049406, 9.22539983969218, 5.24854276008531, 7.73850784503237, 29.1629853944216, 26.6842897200159, 4.37837128931742, .infinity, .infinity, .infinity, .infinity, 5.48912769436664, .infinity, 29.3408760188234, 8.92561311932881, 25.5346065221783, .infinity, 5.48849638640027,
                             .infinity, .infinity, 10.8692956050696, 9.21326810374866, 39.8060255013718, 36.6329106043173, .infinity, 7.85952824431959, 10.4551738244152, 13.7716705832012, 24.5042171047063, 11.586210398575, 7.33825185080596, 0.0, 4.00335783307894, 10.1933214974561, .infinity, .infinity, .infinity, .infinity, .infinity, 36.3577844557466, 9.89386365504409, 7.98409494338628, 8.40697166038428, 36.5012372452275, 34.0225415708218, 9.05550502612406, .infinity, .infinity, .infinity, .infinity, 10.7765005819407, .infinity, 36.6791278696293, 16.2638649701348, 32.8728583729843, .infinity, 10.7921790376272,
                             .infinity, .infinity, 6.86593777199068, 5.20991027066972, 35.8026676682928, 32.6295527712384, .infinity, 3.85617041124065, 6.4518159913363, 9.76831275012226, 20.5008592716273, 7.58285256549608, 3.33489401772703, 4.00335783307894, 0.0, 6.18996366437717, .infinity, .infinity, .infinity, .infinity, .infinity, 32.3544266226676, 5.89050582196515, 3.98073711030734, 4.40361382730534, 32.4978794121486, 30.0191837377429, 5.05214719304512, .infinity, .infinity, .infinity, .infinity, 6.77314274886172, .infinity, 32.6757700365504, 12.2605071370558, 28.8695005399053, .infinity, 6.78882120454827,
                             .infinity, .infinity, 5.59313456212082, 4.16562347271281, 31.9298357362128, 28.7567208391584, .infinity, 2.70207873507271, 5.13779493411577, 5.92414890065122, 16.6280273395473, 3.71002063341606, 2.85506964665014, 10.1933214974561, 6.18996366437717, 0.0, .infinity, .infinity, .infinity, .infinity, .infinity, 28.4815946905876, 7.9197753856569, 2.93645031235043, 7.08152181585923, 28.6250474800686, 26.1463518056629, 6.56706892969625, .infinity, .infinity, .infinity, .infinity, 2.6340580477165, .infinity, 28.8029381044704, 8.38767520497582, 24.9966686078253, .infinity, 2.63342673975013,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 2.84376688249322, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 0.0, 2.72117328085346, 3.18304152193125, 5.02562898555883, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 11.3138649712125, 6.82261927215492, 5.95465499117301, 8.20196914770053, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 2.89614187678504, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 2.72117328085346, 0.0, 5.90421480278472, 7.74680226641229, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 10.7805379746323, 9.54379255300839, 3.23348171031955, 10.923142428554, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 6.02680840442447, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 3.18304152193125, 5.90421480278472, 0.0, 1.84258746362758, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 8.13082344928124, 3.63957775022367, 9.13769651310427, 5.01892762576928, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 7.86939586805205, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 5.02562898555883, 7.7468022664123, 1.84258746362758, 0.0, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 7.4877459866596, 2.99650028760203, 10.9802839767318, 3.1763401621417, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             11.3392934536416, 12.362907286415, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 0.0, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, 32.5505763592042, 32.6472181633004, 5.12419089808696, 4.35040106460888, .infinity, 31.1836734256603, 32.1364545785499, 34.4057435912388, 11.8535673510403, 24.7715740571715, 29.0195326049406, 36.3577844557466, 32.3544266226676, 28.4815946905876, .infinity, .infinity, .infinity, .infinity, .infinity, 0.0, 30.646369077082, 31.418045002938, 35.0307656828605, 7.1133049550056, 10.7720324952248, 33.397903894258, .infinity, .infinity, .infinity, .infinity, 31.1156527383041, .infinity, 7.29119557940739, 20.0939194856118, 3.48492608276231, .infinity, 30.5826706067514,
                             .infinity, .infinity, 12.7564435939558, 6.21249823366885, 34.0946101227072, 30.9214952256527, .infinity, 9.7466762332058, 11.3374297678409, 13.8439242863081, 18.7928017260417, 5.87479501991042, 9.22539983969218, 9.89386365504409, 5.89050582196515, 7.9197753856569, .infinity, .infinity, .infinity, .infinity, .infinity, 30.646369077082, 0.0, 4.98332507330647, 10.2941196492705, 30.789821866563, 28.3111261921572, 10.9426530150103, .infinity, .infinity, .infinity, .infinity, 10.5538334333734, .infinity, 30.9677124909648, 10.5524495914702, 27.1614429943197, .infinity, 8.5476602212188,
                             .infinity, .infinity, 8.52958487447125, 1.22917316036238, 34.8662860485633, 31.6931711515088, .infinity, 5.63852904742314, 6.3541046945344, 8.86059921300165, 19.5644776518977, 6.64647094576649, 5.24854276008531, 7.98409494338628, 3.98073711030734, 2.93645031235043, .infinity, .infinity, .infinity, .infinity, .infinity, 31.418045002938, 4.98332507330647, 0.0, 8.01243022402143, 31.561497792419, 29.0828021180133, 9.03288430335246, .infinity, .infinity, .infinity, .infinity, 5.57050836006693, .infinity, 31.7393884168208, 11.3241255173262, 27.9331189201757, .infinity, 3.56433514791233,
                             .infinity, .infinity, 9.78953543402514, 9.2416033843838, 38.4790067284857, 35.3058918314313, .infinity, 7.38074586941672, 7.23786462273117, 6.19795399169884, 23.1771983318202, 10.259191625689, 7.73850784503237, 8.40697166038428, 4.40361382730534, 7.08152181585923, .infinity, .infinity, .infinity, .infinity, .infinity, 35.0307656828605, 10.2941196492705, 8.01243022402143, 0.0, 35.1742184723415, 32.6955227979358, 7.35584476681317, .infinity, .infinity, .infinity, .infinity, 6.83045891962081, .infinity, 35.3521090967433, 14.9368461972487, 31.5458396000982, .infinity, 4.4480950761091,
                             .infinity, .infinity, 32.6940291486852, 32.7906709527814, 5.02121609605313, 7.38843110357637, .infinity, 31.3271262151413, 32.2799073680309, 34.5491963807198, 11.9970201405213, 24.9150268466525, 29.1629853944216, 36.5012372452275, 32.4978794121486, 28.6250474800686, .infinity, .infinity, .infinity, .infinity, .infinity, 7.1133049550056, 30.789821866563, 31.561497792419, 35.1742184723415, 0.0, 3.65872754021918, 33.541356683739, .infinity, .infinity, .infinity, .infinity, 31.2591055277851, .infinity, 3.69526146781118, 20.2373722750928, 3.62837887224329, .infinity, 30.7261233962324,
                             .infinity, .infinity, 30.2153334742795, 30.3119752783757, 5.78348393054996, 9.81594306738022, .infinity, 28.8484305407356, 29.8012116936251, 32.0705007063141, 9.51832446611554, 22.4363311722468, 26.6842897200159, 34.0225415708218, 30.0191837377429, 26.1463518056629, .infinity, .infinity, .infinity, .infinity, .infinity, 10.7720324952248, 28.3111261921572, 29.0828021180133, 32.6955227979358, 3.65872754021918, 0.0, 31.0626610093333, .infinity, .infinity, .infinity, .infinity, 28.7804098533794, .infinity, 7.35398900803036, 17.758676600687, 7.28710641246247, .infinity, 28.2474277218267,
                             .infinity, .infinity, 6.89208739638408, 8.39774088904035, 36.8461449398832, 33.6730300428288, .infinity, 6.84998321960082, 6.43674776837903, 4.93245306852763, 21.5443365432177, 8.62632983708647, 4.37837128931742, 9.05550502612406, 5.05214719304512, 6.56706892969625, .infinity, .infinity, .infinity, .infinity, .infinity, 33.397903894258, 10.9426530150103, 9.03288430335246, 7.35584476681317, 33.541356683739, 31.0626610093333, 0.0, .infinity, .infinity, .infinity, .infinity, 3.93301088197976, .infinity, 33.7192473081408, 13.3039844086462, 29.9129778114957, .infinity, 6.31537472549146,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 11.7127804695887, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 11.3138649712125, 10.7805379746323, 8.13082344928124, 7.4877459866596, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 0.0, 4.49124569905757, 7.54705626431276, 4.40780576409764, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 9.66638615464814, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 6.82261927215492, 9.54379255300839, 3.63957775022367, 2.99650028760203, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 4.49124569905757, 0.0, 12.0383019633703, 3.33802592490648, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 4.16572420527593, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 5.95465499117301, 3.23348171031955, 9.13769651310427, 10.9802839767318, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 7.54705626431276, 12.0383019633703, 0.0, 11.9548620284104, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 11.0457360301937, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 8.20196914770053, 10.923142428554, 5.01892762576928, 3.1763401621417, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 4.40780576409764, 3.33802592490648, 11.9548620284104, 0.0, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity,
                             .infinity, .infinity, 2.95907651440433, 6.7996815204293, 34.5638937839293, 31.3907788868749, .infinity, 2.91697233762107, 2.50373688639928, 3.29009085293472, 19.2620853872638, 6.34407868113255, 5.48912769436664, 10.7765005819407, 6.77314274886172, 2.6340580477165, .infinity, .infinity, .infinity, .infinity, .infinity, 31.1156527383041, 10.5538334333734, 5.57050836006693, 6.83045891962081, 31.2591055277851, 28.7804098533794, 3.93301088197976, .infinity, .infinity, .infinity, .infinity, 0.0, .infinity, 31.4369961521869, 11.0217332526923, 27.6307266555418, .infinity, 2.38236384351171,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 0.0, .infinity, .infinity, .infinity, 4.19608147299158, .infinity,
                             .infinity, .infinity, 32.871919773087, 32.9685615771832, 8.71647756386431, 4.73488748210723, .infinity, 31.5050168395431, 32.4577979924327, 34.7270870051216, 12.1749107649231, 25.0929174710543, 29.3408760188234, 36.6791278696293, 32.6757700365504, 28.8029381044704, .infinity, .infinity, .infinity, .infinity, .infinity, 7.29119557940739, 30.9677124909648, 31.7393884168208, 35.3521090967433, 3.69526146781118, 7.35398900803036, 33.7192473081408, .infinity, .infinity, .infinity, .infinity, 31.4369961521869, .infinity, 0.0, 20.4152628994946, 3.80626949664508, .infinity, 30.9040140206342,
                             .infinity, .infinity, 12.4566568735925, 12.5532986776886, 23.542160531237, 20.3690456341826, .infinity, 11.0897539400485, 12.0425350929381, 14.311824105627, 8.2403521345715, 4.67765457155976, 8.92561311932881, 16.2638649701348, 12.2605071370558, 8.38767520497582, .infinity, .infinity, .infinity, .infinity, .infinity, 20.0939194856118, 10.5524495914702, 11.3241255173262, 14.9368461972487, 20.2373722750928, 17.758676600687, 13.3039844086462, .infinity, .infinity, .infinity, .infinity, 11.0217332526923, .infinity, 20.4152628994946, 0.0, 16.6089934028495, .infinity, 10.4887511211396,
                             .infinity, .infinity, 29.0656502764419, 29.1622920805381, 7.79251136816334, 3.76005223133308, .infinity, 27.698747342898, 28.6515284957876, 30.9208175084765, 8.36864126827798, 21.2866479744092, 25.5346065221783, 32.8728583729843, 28.8695005399053, 24.9966686078253, .infinity, .infinity, .infinity, .infinity, .infinity, 3.48492608276231, 27.1614429943197, 27.9331189201757, 31.5458396000982, 3.62837887224329, 7.28710641246247, 29.9129778114957, .infinity, .infinity, .infinity, .infinity, 27.6307266555418, .infinity, 3.80626949664508, 16.6089934028495, 0.0, .infinity, 27.0977445239891,
                             .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, .infinity, 4.19608147299158, .infinity, .infinity, .infinity, 0.0, .infinity,
                             .infinity, .infinity, 5.34144035791604, 4.7935083082747, 34.0309116523766, 30.8577967553222, .infinity, 2.93265079330762, 2.78976954662207, 5.67245469644643, 18.7291032557111, 5.81109654957985, 5.48849638640027, 10.7921790376272, 6.78882120454827, 2.63342673975013, .infinity, .infinity, .infinity, .infinity, .infinity, 30.5826706067514, 8.5476602212188, 3.56433514791233, 4.4480950761091, 30.7261233962324, 28.2474277218267, 6.31537472549146, .infinity, .infinity, .infinity, .infinity, 2.38236384351171, .infinity, 30.9040140206342, 10.4887511211396, 27.0977445239891, .infinity, 0.0 ]
        
        
    
        
        // let cGD = Matrix(39,39,cgd)
        
        // #expect( graph.shortestPaths == cGD )
        */
    }
 
    
    @Test func testNodeAccess() throws {
        let graph = Graph.arapatGraph
        
        let node101 = graph.node(name: "101")
        #expect( node101 != nil, "Failed to find node 101")
        #expect( (node101?.label ?? "Bob") == "101", "Got wrong node" )
        
        let node99 = graph.node(name: "99")
        #expect( node99 == nil, "Found node not supposed to be there")
        
    }
    
    @Test func testShortestPaths() throws {
     
        let graph = Graph.arapatGraph
        
        let dist1 = graph.allShortestPaths(from: "101", to: "102")
        #expect( dist1.count == 1 )
        if let path = dist1.first {
            #expect( path.length == 8.45324671861479, "Failed 101 <-> 102 distance" )
            print(path)
        }
        
    }
    
    
    @Test func testNodeCentrality() throws {
        
        let graph = Graph.smallGraph
        
        let centralityIn = graph.degreeCentrality(direction: .In)
        let centralityOut = graph.degreeCentrality(direction: .Out)
        let centralityBoth = graph.degreeCentrality(direction: .Both)
        
        // A === B
        //  =   =
        //    C
        //    |
        //    D
     
        #expect( centralityIn == [2.0, 2.0, 2.0, 1.0 ] )
        print("In: \(centralityIn)")
        
        print("Out: \(centralityOut)")
        #expect( centralityOut == [2.0, 2.0, 3.0, 0.0] )
        
        print("Betweenness: \(centralityBoth)")
        #expect( centralityBoth == [4.0, 4.0, 3.0, 1.0 ] )
        
    }
    
    @Test func testClosenessCentrality() throws {
        let graph = Graph.smallGraph
        let closenessCentrality = graph.closenessCentrality
        print("Closeness: \(closenessCentrality)")
        
        #expect( closenessCentrality == [0.2727272727272727, 0.3333333333333333, 0.3333333333333333, 0.0] )
    }
}
